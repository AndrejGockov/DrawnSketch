{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Programming\\\\End of The Year Project\\\\SketchNDraw\\\\src\\\\pages\\\\canvas\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useContext } from \"react\";\n\n// import { useCanvas } from \"./CanvasContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Canvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  // const downloadDrawing = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 400;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.mozImageSmoothingEnabled = false;\n    ctx.imageSmoothingEnabled = false;\n    ctx.lineCap = \"round\";\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 5;\n    contextRef.current = ctx;\n  }, []);\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    setIsDrawing(true);\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    console.log(offsetX + \" \" + offsetY);\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    nativeEvent.preventDefault();\n  };\n  const Drawing = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    if (!isDrawing) {\n      return;\n    } else {\n      const {\n        offsetX,\n        offsetY\n      } = nativeEvent;\n      console.log(offsetX + \" \" + offsetY);\n      contextRef.current.lineTo(offsetX, offsetY);\n      contextRef.current.stroke();\n      nativeEvent.preventDefault();\n    }\n    // const { offsetX, offsetY } = nativeEvent;\n    // console.log(offsetX + \" \" + offsetY);\n  };\n\n  const stopDrawing = () => {\n    setIsDrawing(false);\n    contextRef.current.closePath();\n  };\n  const setToDraw = () => {\n    contextRef.current.globalCompositeOperation = \"source-over\";\n  };\n  const setToErase = () => {\n    contextRef.current.globalCompositeOperation = \"destination-out\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"canvas\",\n    onMouseDown: startDrawing,\n    onMouseMove: Drawing,\n    onMouseUp: stopDrawing,\n    onMouseLeave: stopDrawing,\n    onTouchStart: startDrawing,\n    onTouchMove: Drawing\n    // onTouc={stopDrawing}\n    ,\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n// export const downloadDrawing = (event) => {\n//   let link = event.currentTarget;\n//   // link.download = \"download.png\";\n//   link.setAttribute(\"download\", \"SketchNDraw.png\");\n//   let image = canvasRef.current.toDataURL(\"image/png\");\n//   link.setAttribute(\"href\", image);\n// };\n_s(Canvas, \"gX+PwV6uGFVV0Nk+m7BEZwABNTU=\");\n_c = Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useContext","Canvas","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","current","width","height","ctx","getContext","mozImageSmoothingEnabled","imageSmoothingEnabled","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","console","log","beginPath","moveTo","stroke","preventDefault","Drawing","lineTo","stopDrawing","closePath","setToDraw","globalCompositeOperation","setToErase"],"sources":["C:/Users/Admin/Documents/Programming/End of The Year Project/SketchNDraw/src/pages/canvas/Canvas.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useContext } from \"react\";\r\n\r\n// import { useCanvas } from \"./CanvasContext\";\r\n\r\nexport const Canvas = () => {\r\n  const canvasRef = useRef(null);\r\n  const contextRef = useRef(null);\r\n\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  // const downloadDrawing = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    canvas.width = 800;\r\n    canvas.height = 400;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.mozImageSmoothingEnabled = false;\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctx.lineCap = \"round\";\r\n    ctx.strokeStyle = \"black\";\r\n    ctx.lineWidth = 5;\r\n    contextRef.current = ctx;\r\n  }, []);\r\n\r\n  const startDrawing = ({ nativeEvent }) => {\r\n    setIsDrawing(true);\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    console.log(offsetX + \" \" + offsetY);\r\n\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(offsetX, offsetY);\r\n    contextRef.current.stroke();\r\n    nativeEvent.preventDefault();\r\n  };\r\n\r\n  const Drawing = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    } else {\r\n      const { offsetX, offsetY } = nativeEvent;\r\n      console.log(offsetX + \" \" + offsetY);\r\n\r\n      contextRef.current.lineTo(offsetX, offsetY);\r\n      contextRef.current.stroke();\r\n      nativeEvent.preventDefault();\r\n    }\r\n    // const { offsetX, offsetY } = nativeEvent;\r\n    // console.log(offsetX + \" \" + offsetY);\r\n  };\r\n\r\n  const stopDrawing = () => {\r\n    setIsDrawing(false);\r\n    contextRef.current.closePath();\r\n  };\r\n\r\n  const setToDraw = () => {\r\n    contextRef.current.globalCompositeOperation = \"source-over\";\r\n  };\r\n\r\n  const setToErase = () => {\r\n    contextRef.current.globalCompositeOperation = \"destination-out\";\r\n  };\r\n\r\n  return (\r\n    <canvas\r\n      id=\"canvas\"\r\n      onMouseDown={startDrawing}\r\n      onMouseMove={Drawing}\r\n      onMouseUp={stopDrawing}\r\n      onMouseLeave={stopDrawing}\r\n      onTouchStart={startDrawing}\r\n      onTouchMove={Drawing}\r\n      // onTouc={stopDrawing}\r\n      ref={canvasRef}\r\n    />\r\n  );\r\n};\r\n\r\n// export const downloadDrawing = (event) => {\r\n//   let link = event.currentTarget;\r\n//   // link.download = \"download.png\";\r\n//   link.setAttribute(\"download\", \"SketchNDraw.png\");\r\n//   let image = canvasRef.current.toDataURL(\"image/png\");\r\n//   link.setAttribute(\"href\", image);\r\n// };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAEtE;AAAA;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;EAAA;EAC1B,MAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMK,UAAU,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE/B,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD;;EAEAF,SAAS,CAAC,MAAM;IACd,MAAMS,MAAM,GAAGJ,SAAS,CAACK,OAAO;IAChCD,MAAM,CAACE,KAAK,GAAG,GAAG;IAClBF,MAAM,CAACG,MAAM,GAAG,GAAG;IAEnB,MAAMC,GAAG,GAAGJ,MAAM,CAACK,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,wBAAwB,GAAG,KAAK;IACpCF,GAAG,CAACG,qBAAqB,GAAG,KAAK;IACjCH,GAAG,CAACI,OAAO,GAAG,OAAO;IACrBJ,GAAG,CAACK,WAAW,GAAG,OAAO;IACzBL,GAAG,CAACM,SAAS,GAAG,CAAC;IACjBb,UAAU,CAACI,OAAO,GAAGG,GAAG;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,YAAY,GAAG,QAAqB;IAAA,IAApB;MAAEC;IAAY,CAAC;IACnCb,YAAY,CAAC,IAAI,CAAC;IAElB,MAAM;MAAEc,OAAO;MAAEC;IAAQ,CAAC,GAAGF,WAAW;IACxCG,OAAO,CAACC,GAAG,CAACH,OAAO,GAAG,GAAG,GAAGC,OAAO,CAAC;IAEpCjB,UAAU,CAACI,OAAO,CAACgB,SAAS,EAAE;IAC9BpB,UAAU,CAACI,OAAO,CAACiB,MAAM,CAACL,OAAO,EAAEC,OAAO,CAAC;IAC3CjB,UAAU,CAACI,OAAO,CAACkB,MAAM,EAAE;IAC3BP,WAAW,CAACQ,cAAc,EAAE;EAC9B,CAAC;EAED,MAAMC,OAAO,GAAG,SAAqB;IAAA,IAApB;MAAET;IAAY,CAAC;IAC9B,IAAI,CAACd,SAAS,EAAE;MACd;IACF,CAAC,MAAM;MACL,MAAM;QAAEe,OAAO;QAAEC;MAAQ,CAAC,GAAGF,WAAW;MACxCG,OAAO,CAACC,GAAG,CAACH,OAAO,GAAG,GAAG,GAAGC,OAAO,CAAC;MAEpCjB,UAAU,CAACI,OAAO,CAACqB,MAAM,CAACT,OAAO,EAAEC,OAAO,CAAC;MAC3CjB,UAAU,CAACI,OAAO,CAACkB,MAAM,EAAE;MAC3BP,WAAW,CAACQ,cAAc,EAAE;IAC9B;IACA;IACA;EACF,CAAC;;EAED,MAAMG,WAAW,GAAG,MAAM;IACxBxB,YAAY,CAAC,KAAK,CAAC;IACnBF,UAAU,CAACI,OAAO,CAACuB,SAAS,EAAE;EAChC,CAAC;EAED,MAAMC,SAAS,GAAG,MAAM;IACtB5B,UAAU,CAACI,OAAO,CAACyB,wBAAwB,GAAG,aAAa;EAC7D,CAAC;EAED,MAAMC,UAAU,GAAG,MAAM;IACvB9B,UAAU,CAACI,OAAO,CAACyB,wBAAwB,GAAG,iBAAiB;EACjE,CAAC;EAED,oBACE;IACE,EAAE,EAAC,QAAQ;IACX,WAAW,EAAEf,YAAa;IAC1B,WAAW,EAAEU,OAAQ;IACrB,SAAS,EAAEE,WAAY;IACvB,YAAY,EAAEA,WAAY;IAC1B,YAAY,EAAEZ,YAAa;IAC3B,WAAW,EAAEU;IACb;IAAA;IACA,GAAG,EAAEzB;EAAU;IAAA;IAAA;IAAA;EAAA,QACf;AAEN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,GAlFaD,MAAM;AAAA,KAANA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}