{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Programming\\\\End of The Year Project\\\\SketchNDraw\\\\src\\\\pages\\\\canvas\\\\Canvas.js\";\nimport React, { useEffect } from \"react\";\n// import { useCanvas } from \"./CanvasContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Canvas() {\n  // //Refrences\n  // const canvasRef = useRef(null);\n  // const contextRef = useState(null);\n\n  // let [isDrawing, setIsDrawing] = useState(false);\n\n  // //Tools\n  // const [brushSize, setBrushSize] = useState(10);\n  // const [eraserSize, setEraserSize] = useState(10);\n  // // let penSelected = true;\n  // // let eraserSelected = false;\n\n  // //Color\n  // const [color, setColor] = useState(\"#000000\");\n\n  // //Window Size\n  // // const windowWidth = useRef(window.innerWidth);\n\n  // useEffect(() => {\n  //   const canvas = canvasRef.current;\n  //   const ctx = canvas.getContext(\"2d\");\n  //   ctx.fillRect(0, 0, canvas.width, canvas.height);\n  //   ctx.lineCap = \"round\";\n  //   ctx.strokeStyle = \"black\";\n  //   ctx.lineWidth = 5;\n  //   contextRef.current = ctx;\n\n  //   setIsDrawing(true);\n\n  //   //Canvas Size\n  //   canvas.width = 800;\n  //   canvas.height = 400;\n  // }, [canvasRef]);\n\n  // const StartDrawing = ({ nativeEvent }) => {\n  //   const { offsetX, offsetY } = nativeEvent;\n  //   contextRef.current.beginPath();\n  //   contextRef.current.moveTo(offsetX, offsetY);\n  // };\n\n  // const Draw = ({ nativeEvent }) => {\n  //   if (!setIsDrawing) {\n  //     return;\n  //   } else {\n  //     const { offsetX, offsetY } = nativeEvent;\n  //     contextRef.current.moveTo(offsetX, offsetY);\n  //     contextRef.current.stroke();\n\n  //     console.log(offsetX + \" + \" + offsetY);\n  //     console.log(\"its drawing\");\n  //   }\n  // };\n\n  // const StopDrawing = (e) => {\n  //   setIsDrawing(false);\n\n  //   contextRef.current.stroke();\n  //   contextRef.current.closePath(); //ends the path/isDrawing\n  //   // e.preventDefault();\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    onMouseDown: startDrawing,\n    onMouseUp: finishDrawing,\n    onMouseMove: draw,\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_c = Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","Canvas","startDrawing","finishDrawing","draw","canvasRef"],"sources":["C:/Users/Admin/Documents/Programming/End of The Year Project/SketchNDraw/src/pages/canvas/Canvas.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\n// import { useCanvas } from \"./CanvasContext\";\r\n\r\nexport function Canvas() {\r\n  // //Refrences\r\n  // const canvasRef = useRef(null);\r\n  // const contextRef = useState(null);\r\n\r\n  // let [isDrawing, setIsDrawing] = useState(false);\r\n\r\n  // //Tools\r\n  // const [brushSize, setBrushSize] = useState(10);\r\n  // const [eraserSize, setEraserSize] = useState(10);\r\n  // // let penSelected = true;\r\n  // // let eraserSelected = false;\r\n\r\n  // //Color\r\n  // const [color, setColor] = useState(\"#000000\");\r\n\r\n  // //Window Size\r\n  // // const windowWidth = useRef(window.innerWidth);\r\n\r\n  // useEffect(() => {\r\n  //   const canvas = canvasRef.current;\r\n  //   const ctx = canvas.getContext(\"2d\");\r\n  //   ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  //   ctx.lineCap = \"round\";\r\n  //   ctx.strokeStyle = \"black\";\r\n  //   ctx.lineWidth = 5;\r\n  //   contextRef.current = ctx;\r\n\r\n  //   setIsDrawing(true);\r\n\r\n  //   //Canvas Size\r\n  //   canvas.width = 800;\r\n  //   canvas.height = 400;\r\n  // }, [canvasRef]);\r\n\r\n  // const StartDrawing = ({ nativeEvent }) => {\r\n  //   const { offsetX, offsetY } = nativeEvent;\r\n  //   contextRef.current.beginPath();\r\n  //   contextRef.current.moveTo(offsetX, offsetY);\r\n  // };\r\n\r\n  // const Draw = ({ nativeEvent }) => {\r\n  //   if (!setIsDrawing) {\r\n  //     return;\r\n  //   } else {\r\n  //     const { offsetX, offsetY } = nativeEvent;\r\n  //     contextRef.current.moveTo(offsetX, offsetY);\r\n  //     contextRef.current.stroke();\r\n\r\n  //     console.log(offsetX + \" + \" + offsetY);\r\n  //     console.log(\"its drawing\");\r\n  //   }\r\n  // };\r\n\r\n  // const StopDrawing = (e) => {\r\n  //   setIsDrawing(false);\r\n\r\n  //   contextRef.current.stroke();\r\n  //   contextRef.current.closePath(); //ends the path/isDrawing\r\n  //   // e.preventDefault();\r\n  // };\r\n\r\n  return (\r\n    <canvas\r\n      onMouseDown={startDrawing}\r\n      onMouseUp={finishDrawing}\r\n      onMouseMove={draw}\r\n      ref={canvasRef}\r\n    />\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC;AAAA;AAEA,OAAO,SAASC,MAAM,GAAG;EACvB;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBACE;IACE,WAAW,EAAEC,YAAa;IAC1B,SAAS,EAAEC,aAAc;IACzB,WAAW,EAAEC,IAAK;IAClB,GAAG,EAAEC;EAAU;IAAA;IAAA;IAAA;EAAA,QACf;AAEN;AAAC,KAtEeJ,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}